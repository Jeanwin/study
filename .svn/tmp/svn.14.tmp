/**
 * 
 */
package com.zonekey.study.web;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springside.modules.web.MediaTypes;

import com.zonekey.study.common.HttpSend;
import com.zonekey.study.common.JsonUtil;
import com.zonekey.study.entity.PageBean;
import com.zonekey.study.entity.SysUser;
import com.zonekey.study.service.ActiveService;
import com.zonekey.study.service.DeptService;
import com.zonekey.study.service.MyClassRoomService;
import com.zonekey.study.service.ResourceService;
import com.zonekey.study.service.SysCodeService;
import com.zonekey.study.service.SysUserService;
import com.zonekey.study.service.auth.ShiroDbRealm;
import com.zonekey.study.vo.Tree;

/**
 * @author admin
 * 
 */
@Controller
public class TeachingController {
	@Resource
	private ActiveService acService;
	@Resource
	private DeptService deptService;
	@Autowired
	private SysUserService userService;
	@Autowired
	private MyClassRoomService myClassRoomService;
	@Autowired
	private SysCodeService syscodeService;
	@Autowired
	private ResourceService reService;
	//@Resource
	//private IdentifyControllerService webService;

	/**
	 * 新建活动，添加评审专家，查询所有部门
	 * 
	 * @return
	 */
	@RequestMapping(value = "/private/getDepts", method = RequestMethod.POST, produces = MediaTypes.JSON_UTF_8)
	public @ResponseBody
	List<Map<String, Object>> getDepts() {
		return deptService.getDepts();
	}

	/**
	 * 新建活动》选择专家》根据部门id查询用户
	 * 
	 * @param req
	 * @return
	 */
	@RequestMapping(value = "/private/getByDept", method = RequestMethod.POST, produces = MediaTypes.JSON_UTF_8)
	public @ResponseBody
	Map<String, Object> findUsersByDeptIdPage(HttpServletRequest req) {
		PageBean pb = JsonUtil.jsonToPage(req);
		return userService.findUsersByDeptPage(pb);
	}

	/**
	 * 获取直播课表(全部和按条件均可，以后加上分页参数)
	 */
	@RequestMapping(value = "/private/liveCurriculum", method = RequestMethod.POST, consumes = MediaTypes.JSON_UTF_8)
	public @ResponseBody
	Map<String, Object> findLiveCurriculum(HttpServletRequest req) {
		PageBean pageBean = JsonUtil.jsonToPage(req);
		return myClassRoomService.findMyLiveCurriculum(pageBean);
	}

	/**
	 * 获取视频树-所有
	 * 
	 * @param req
	 * @return
	 */
	@RequestMapping(value = "/private/videoTrees", method = RequestMethod.POST, produces = MediaTypes.JSON_UTF_8)
	public @ResponseBody
	List<Tree> getVideoTrees(HttpServletRequest req) {
		return reService.getVideoTrees();
	}

	/**
	 * 上传资源
	 * 
	 * @param req
	 */
	@RequestMapping(value = "/private/upload", method = RequestMethod.POST, produces = MediaTypes.JSON_UTF_8)
	public @ResponseBody
	List<Integer> addTeachingResource(MultipartHttpServletRequest req) {
		String parentid = req.getParameter("parentid");
		// System.out.println("parentid:"+req.getParameter("parentid"));
		return reService.addTeachingResource(req, null, parentid);
	}

	/**
	 * 获取当前登录用户信息
	 * 
	 * @return
	 */
	@RequestMapping(value = "/gateway/getUser", method = RequestMethod.POST, produces = MediaTypes.JSON_UTF_8)
	public @ResponseBody
	SysUser getUser() {
		if (ShiroDbRealm.getCurrentLoginName() != null && !"".equals(ShiroDbRealm.getCurrentLoginName())) {
			SysUser user = userService.getByLoginname(ShiroDbRealm.getCurrentLoginName());
			user.setAdminFlag(userService.isAdminAcount());
			user.setRoles(userService.getUserRole());
			return user;
		} else {
			return null;
		}
	}

	/**
	 * 判断当前用户是否有管理员权限
	 * 
	 * @return
	 */
	@RequestMapping(value = "/gateway/isAdmin", method = RequestMethod.POST, produces = MediaTypes.JSON_UTF_8)
	public @ResponseBody
	int isAdmin() {
		return userService.isAdminAcount();
	}

	/**
	 * 
	 * @param req
	 * @param res
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/gateway/code", method = RequestMethod.POST)
	public @ResponseBody
	List<Map<String, Object>> code(HttpServletRequest req) {
		Map<String, String> map = JsonUtil.jsonToObject(req, Map.class);
		if (map == null || map.get("value") == null)
			return null;
		return syscodeService.getCode(map.get("value"));
	}

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login(HttpServletRequest req, HttpServletResponse res) {
		/*String loginname = ShiroDbRealm.getCurrentLoginName();
		SysUser user = userService.getByLoginname(loginname);
		boolean flag = false;
		if(user == null){
			user = new SysUser();
			flag = true;
		}
		Map<String,Object> userMap = webService.getData(loginname);
		if(userMap != null){
        	String name = (String) userMap.get("RealName");
        	String sex = (String) userMap.get("xbm");
        	if("1".equals(sex)){
        		sex = "0";
        	}else{
        		sex = "1";
        	}
        	String code = (String) (userMap.get("schoolid")==null?userMap.get("schoolId"):userMap.get("schoolid"));
        	String userType = (String) userMap.get("identityType");
        	if("2".equals(userType)){//老师
        		userType = "1";
        	}else if("3".equals(userType)){//学生
        		userType = "2";
        	}else if("4".equals(userType)){//家长
        		userType = "3";
        	}else if("1".equals(userType)){//管理员
        		userType = "0";
        	}else{//校友
        		userType = "4";
        	}
        	user.setLoginname(loginname);
        	String deptid = deptService.findDeptByCode(code);
        	if(deptid == null){
        		deptid = "1";
        	}
        	user.setDeptid(deptid);
        	user.setUsertype(userType);
        	user.setName(name);
        	user.setSex(sex);
        	if(flag){
        		userService.inserUser(user);
        	}else{
        		userService.updateUser(user);
        	}
        }*/
		return "redirect:/../";
		//return "redirect:../study";
	}
	@ResponseBody
	@RequestMapping(value = "/gateway/login", method = RequestMethod.POST)
	public Map<String,Object> mobileLogin(HttpServletRequest req, String username,String password){
		try {
			return HttpSend.login(req, username, password);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	@RequestMapping(value = "/private/saveActive", method = RequestMethod.POST)
	public String saveActive(HttpServletRequest req, HttpServletResponse res) {
		res.setHeader("content-type", "text/html;charset=UTF-8");
		res.setCharacterEncoding("UTF-8");
		return "portal/saveActive";
	}

	/**
	 * 跳转到活动详情页
	 */
	@RequestMapping(value = "/gateway/activeDetail", method = RequestMethod.GET)
	public String activeDetail(HttpServletRequest req, HttpServletResponse res, ModelMap map) {
		res.setHeader("content-type", "text/html;charset=UTF-8");
		res.setCharacterEncoding("UTF-8");
		// List<Tree> trees = reService.getVideoTrees();
		// map.addAttribute("trees",JsonUtil.toJson(trees));
		return "portal/activeDetail";
	}
	/**
	 * 跳转到编辑活动页面
	 * @param res
	 * @return
	 */
	@RequestMapping(value="/private/editActive",method = RequestMethod.GET)
	public String editActive(HttpServletResponse res){
		res.setHeader("content-type", "text/html;charset=UTF-8");
		res.setCharacterEncoding("UTF-8");
		return "portal/saveActive";
	}
	/**
	 * 查找编辑的活动
	 * @param activeid
	 * @return
	 */
	@RequestMapping(value="/private/getActiveEdit",method= RequestMethod.POST,produces = MediaTypes.JSON_UTF_8)
	public @ResponseBody Map<String,Object> getActiveEdit(@RequestParam("activeid") Integer activeid){
	    return acService.getActiveEdit(activeid);
	}
}
